
mult/2 [AC].
one/0.
exp/2.
g/0.
decrypt/3.
encrypt/4.
checksign/3.
getmess/1.
sign/3.

one < g < mult < exp < encrypt < decrypt < checksign < getmess < sign.

=== Equational Theory

exp(exp(z,x),y) = exp(z,mult(x,y)).
decrypt(encrypt(m, x, exp(x, y), r), x, y) = m.
checksign(sign(m, x, s), x, exp(x, s)) = m.
getmess(sign(m, x, s)) = m.

(*

Taken from [58] Usenix 2024.

Result: 0.17s user 0.04s system 86% cpu 0.247 total
Final number of rules in R (minus the name and bin rule): 15
Number of rules computed: 276
Shown convergent: yes

Rewrite system R:
  name(X_1) -> name(X_1)
  bin(X_2,X_1) -> bin(X_2,X_1)
  sign(X_3,X_2,X_1) -> sign(X_3,X_2,X_1)
  getmess(X_1) -> getmess(X_1)
  checksign(X_3,X_2,X_1) -> checksign(X_3,X_2,X_1)
  decrypt(X_3,X_2,X_1) -> decrypt(X_3,X_2,X_1)
  encrypt(X_4,X_3,X_2,X_1) -> encrypt(X_4,X_3,X_2,X_1)
  exp(X_2,X_1) -> exp(X_2,X_1)
  (X_2 mult X_1) -> (X_2 mult X_1)
  g -> g
  one -> one
  decrypt(encrypt(X_1,exp(X_2,X_3),exp(X_2,(X_3 mult X_4)),X_5),exp(X_2,X_3),X_4) -> X_1
  checksign(sign(X_1,exp(X_2,X_3),X_4),exp(X_2,X_3),exp(X_2,(X_3 mult X_4))) -> X_1
  exp(exp(X_1,X_2),X_3) -> exp(X_1,(X_2 mult X_3))
  getmess(sign(X_1,X_2,X_3)) -> X_1
  checksign(sign(X_1,X_2,X_3),X_2,exp(X_2,X_3)) -> X_1
  decrypt(encrypt(X_1,X_2,exp(X_2,X_3),X_4),X_2,X_3) -> X_1
Rewrite system Rn:
  exp(exp(X_1,X_2),X_3) -> exp(X_1,(X_2 mult X_3))
  decrypt(encrypt(X_1,X_2,exp(X_2,X_3),X_4),X_2,X_3) -> X_1
  checksign(sign(X_1,X_2,X_3),X_2,exp(X_2,X_3)) -> X_1
  getmess(sign(X_1,X_2,X_3)) -> X_1
  checksign(sign(X_1,exp(X_2,X_3),X_4),exp(X_2,X_3),exp(X_2,(X_3 mult X_4))) -> X_1
  decrypt(encrypt(X_1,exp(X_2,X_3),exp(X_2,(X_3 mult X_4)),X_5),exp(X_2,X_3),X_4) -> X_1
Equations En
  (X_1 mult X_2) = (X_2 mult X_1)
  ((X_1 mult X_2) mult X_3) = (X_1 mult (X_2 mult X_3))

The following rewrite system is En-convergent for E
  decrypt(encrypt(X_1,exp(X_2,X_3),exp(X_2,(X_3 mult X_4)),X_5),exp(X_2,X_3),X_4) -> X_1
  checksign(sign(X_1,exp(X_2,X_3),X_4),exp(X_2,X_3),exp(X_2,(X_3 mult X_4))) -> X_1
  exp(exp(X_1,X_2),X_3) -> exp(X_1,(X_2 mult X_3))
  getmess(sign(X_1,X_2,X_3)) -> X_1
  checksign(sign(X_1,X_2,X_3),X_2,exp(X_2,X_3)) -> X_1
  decrypt(encrypt(X_1,X_2,exp(X_2,X_3),X_4),X_2,X_3) -> X_1

Number of rules computed: 276

*)



